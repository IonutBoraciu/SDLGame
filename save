#include <SDL2/SDL.h>
#include <SDL2/SDL_image.h>
#include <stdio.h>
#define SCREEN_WIDTH   1280
#define SCREEN_HEIGHT  720

SDL_Texture *LoadTexture(const char filepath[100],SDL_Renderer *rendererTarget) {
    SDL_Texture *texture = NULL;
    SDL_Surface *surface = IMG_Load(filepath);
    if(!surface) {
        printf("Surface broke\n");
    } else {
        texture = SDL_CreateTextureFromSurface(rendererTarget,surface);
        if(!texture)
            printf("Texture broke\n");
    }
    SDL_FreeSurface(surface);
    return texture;
}

int main() {
    const int FPS = 60;
    int frameTime = 0;
    int animationFrameTime = 0;  // Separate frame counter for animation

    SDL_Window* window = NULL;
    SDL_Texture *currentImage = NULL;
    SDL_Renderer *rendererTarget = NULL;
    SDL_Rect playerRect;
    SDL_Rect playerPosition;
    playerPosition.x = playerPosition.y = 0;
    playerPosition.w = playerPosition.h = 64;
    int textureWidth, textureHeight;
    int frameWidth, frameHeight;

    SDL_Init(SDL_INIT_VIDEO);
    int imgFlags = IMG_INIT_PNG | IMG_INIT_JPG;
    window = SDL_CreateWindow("Testing",SDL_WINDOWPOS_CENTERED,SDL_WINDOWPOS_CENTERED,1280,720,0);
    rendererTarget = SDL_CreateRenderer(window,-1,SDL_RENDERER_ACCELERATED | SDL_RENDERER_PRESENTVSYNC);
    currentImage = LoadTexture("testing.png",rendererTarget);
    SDL_QueryTexture(currentImage,NULL,NULL,&textureWidth,&textureHeight);
    frameWidth = textureWidth/4;
    frameHeight = textureHeight/4;
    playerRect.x = playerRect.y = 0;
    playerRect.w = frameWidth;
    playerRect.h = frameHeight;
    SDL_SetRenderDrawColor(rendererTarget,0xFF,0,0,0xFF);

    int isRunning = 1;
    SDL_Event ev;

    int down = 0, up = 0, right = 0, left = 0; // Movement flags

    while(isRunning) {
        while(SDL_PollEvent(&ev)!=0) {
            if(ev.type == SDL_QUIT) {
                isRunning = 0;
            } else if (ev.type == SDL_KEYDOWN){
                if(ev.key.keysym.sym == SDLK_s) {
                    down = 1;
                } else if(ev.key.keysym.sym == SDLK_w) {
                    up = 1;
                } else if(ev.key.keysym.sym == SDLK_d) {
                    right = 1;
                } else if(ev.key.keysym.sym == SDLK_a) {
                    left = 1;
                }
            } else if(ev.type == SDL_KEYUP) {
                if(ev.key.keysym.sym == SDLK_s) {
                    down = 0;
                } else if(ev.key.keysym.sym == SDLK_w) {
                    up = 0;
                } else if(ev.key.keysym.sym == SDLK_d) {
                    right = 0;
                } else if(ev.key.keysym.sym == SDLK_a) {
                    left = 0;
                }
            }
        }

        // Move the player immediately when a key is pressed
        if(down) {
            playerPosition.y += 2;
        }
        if(up) {
            playerPosition.y -= 2;
        }

        // Update animation frames separately
        animationFrameTime++;
        if(animationFrameTime >= 5) {
            animationFrameTime = 0;
            if(down) {
                playerRect.y = 0;
                playerRect.x += frameWidth;
                if(playerRect.x + frameWidth >= textureWidth) {
                    playerRect.x = 0;
                }
            }
            if(up) {
                playerRect.y = frameHeight * 3;
                playerRect.x += frameWidth;
                if(playerRect.x + frameWidth >= textureWidth) {
                    playerRect.x = 0;
                }
            }
        }

        SDL_RenderClear(rendererTarget);
        SDL_RenderCopy(rendererTarget,currentImage,&playerRect,&playerPosition);
        SDL_RenderPresent(rendererTarget);

        SDL_Delay(1000 / FPS);  // Cap the frame rate
    }

    SDL_DestroyWindow(window);
    SDL_DestroyTexture(currentImage);
    SDL_DestroyRenderer(rendererTarget);
    SDL_Quit();

    return 0;
}
